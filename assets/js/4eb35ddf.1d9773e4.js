"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6990],{767:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var o=n(3117),r=(n(7294),n(3905));const s={title:"useAdminRoles",description:"API reference for the useAdminRoles hook",tags:["admin","hooks","roles"]},a=void 0,i={unversionedId:"docs/core/admin/hooks/use-admin-roles",id:"docs/core/admin/hooks/use-admin-roles",title:"useAdminRoles",description:"API reference for the useAdminRoles hook",source:"@site/docs/docs/01-core/admin/04-hooks/use-admin-roles.mdx",sourceDirName:"docs/01-core/admin/04-hooks",slug:"/docs/core/admin/hooks/use-admin-roles",permalink:"/docs/core/admin/hooks/use-admin-roles",draft:!1,editUrl:"https://github.com/strapi/strapi/tree/main/docs/docs/docs/01-core/admin/04-hooks/use-admin-roles.mdx",tags:[{label:"admin",permalink:"/tags/admin"},{label:"hooks",permalink:"/tags/hooks"},{label:"roles",permalink:"/tags/roles"}],version:"current",frontMatter:{title:"useAdminRoles",description:"API reference for the useAdminRoles hook",tags:["admin","hooks","roles"]},sidebar:"docs",previous:{title:"useAdminRolePermissions",permalink:"/docs/core/admin/hooks/use-admin-role-permissions"},next:{title:"useAdminUsers",permalink:"/docs/core/admin/hooks/use-admin-users"}},l={},c=[{value:"Usage",id:"usage",level:2},{value:"Typescript",id:"typescript",level:2},{value:"Fetch all roles",id:"fetch-all-roles",level:3},{value:"Fetch one role",id:"fetch-one-role",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"An abstraction around ",(0,r.kt)("inlineCode",{parentName:"p"},"react-query"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"useQuery")," hook. It can be used to fetch one ore more admin role."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"The hooks can receive two optional parameters:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"query params: an object containing the query params to be sent to the API. They are going to be\nstringified by ",(0,r.kt)("inlineCode",{parentName:"li"},"qs"),". All params are equal except ",(0,r.kt)("inlineCode",{parentName:"li"},"id"),", which is used to fetch a single users, if\nit is passed."),(0,r.kt)("li",{parentName:"ol"},"options: an object containing the options to be passed to ",(0,r.kt)("inlineCode",{parentName:"li"},"useQuery"),".")),(0,r.kt)("p",null,"It returns an object containing some of the react-query attributes."),(0,r.kt)("h2",{id:"typescript"},"Typescript"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { UseQueryOptions } from 'react-query'\n\ntype Role = object;\n\nuseAdminRoles(queryParams: object, reactQueryOptions: UseQueryOptions): {\n    roles: Role[],\n    isLoading: boolean;\n    error: object;\n    isError: boolean;\n    refetch: () => Promise<void>;\n};\n")),(0,r.kt)("h3",{id:"fetch-all-roles"},"Fetch all roles"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useAdminRoles } from 'path/to/hooks';\n\nconst MyComponent = ({ onMoveItem }) => {\n  const { roles, isLoading, refetch } = useAdminRoles();\n\n  return /* ... */;\n};\n")),(0,r.kt)("h3",{id:"fetch-one-role"},"Fetch one role"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Box } from '@strapi/design-system';\n\nimport { useAdminRoles } from 'path/to/hooks';\n\nconst MyComponent = ({ onMoveItem }) => {\n  const { users: [user], isLoading, refetch } = useAdminRoles({ id: 1 });\n\n  return /* ... */;\n};\n")))}u.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||s;return n?o.createElement(f,a(a({ref:t},p),{},{components:n})):o.createElement(f,a({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,a=new Array(s);a[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var c=2;c<s;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);